{
  "index.html": {
    "href": "index.html",
    "title": "LOD1-2道路モデル自動生成ツール",
    "keywords": "LOD1-2道路モデル自動生成ツール 道路縁シェープファイルからLOD1道路モデルの作成を行うためのツールと、LOD1道路CityGMLファイルと航空写真からLOD2道路モデルの作成を行うためのツールです。"
  },
  "manual/devManLod1.html": {
    "href": "manual/devManLod1.html",
    "title": "環境構築手順書",
    "keywords": "環境構築手順書 1 本書について 本書では、LOD1道路モデル自動生成ツール（以下「本ツール」という。）の環境構築手順について記載しています。 2 動作環境 本ツールの動作環境は以下のとおりです。 項目 最小動作環境 推奨動作環境 OS Microsoft Windows 10 または 11 同左 CPU Intel Core i7以上 同左 メモリ 16GB以上 32GB以上 HDD空き容量 1GB以上 5GB以上 ネットワーク 不要 同左 3 インストール手順 こちら からアプリケーションをダウンロードします。 ダウンロード後、zipファイルを右クリックし、「すべて展開」を選択することで、zipファイルを展開します。 展開されたフォルダ内の「AutoCreateLod1Road.exe」と「ConvertShapeToCityGML.exe」がLOD1道路自動生成ツールのアプリケーションです。 二つのアプリケーションはコンソールアプリケーションのため、コマンドプロンプトなどのコンソールから使用可能です。 4 ビルド手順 自身でソースファイルをダウンロードしビルドを行うことで、実行ファイルを生成することができます。 ビルドにはVisualStudio2019を使用するため、事前にVisualStudio2019をインストールする必要があります。 ソースファイルは こちら からダウンロード可能です。 GitHubからダウンロードしたソースファイルの構成は以下のとおりです。 ビルド時に本ツールが参照しているBoost C++ Librariesが必要なため、以下からboost_1_83_0.zipをダウンロードしてください。 Boost C++ Libraries ver.1.83.0 4-1 Boost C++ Libraries のビルド Boost C++ Librariesのビルドには約3GBのHDD容量が必要になります。 （1）事前にダウンロードしたboost_1_83_0.zipを解凍します。 本書では、C:\\work下に解凍したものとし、C:\\work\\boost_1_83_0以下のファイル構成は下図のとおりです。 （2）コマンドプロンプトを使用してBoost C++ Librariesのビルドします。 コマンドプロンプトを起動し、カレントディレクトリを（1）で解凍したboost_1_83_0フォルダに移動します。 そして、bootstrapコマンドを実行します。 次に、b2コマンドを使用してライブラリをビルドします。 b2コマンドのオプションについては以下に示すとおりです。 オプション 説明 --build-dir ビルドディレクトリのパス。 address-model 64 : 64bitのライブラリを作成します。 32 : 32bitのライブラリを作成します。 -j（数字） 並列ビルド設定。複数のCPUを使用してビルドすることが可能です。 数字部分は自マシンのスペックによって変更してください。 --includedir 指定したパスにインクルードヘッダファイルを出力します。 --libdir 指定したパスにライブラリファイルを出力します。 【コマンド例】 解凍したライブラリがC:\\work\\boost_1_83_0 # cd C:\\work\\boost_1_83_0 # bootstrap # b2 --build-dir=build/x64 address-model=64 -j4 install --includedir=C:\\work\\lib\\boost_1_83_0\\include --libdir=C:\\work\\lib\\boost_1_83_0\\lib\\x64 【ビルド結果】 （3）ビルド結果のインクルードヘッダファイルとライブラリファイルをソースフォルダに移動します。 【インクルードヘッダファイルのコピー】 （b2コマンドの--includedirで指定したパス）\\boost-1_83\\boostフォルダ を （ソースコードの保存先パス）\\Auto-Create-tran-lod1-2-tool\\lod1\\src\\LIB\\boost_1_83_0\\include下にコピーします。 【ライブラリファイルのコピー】 （b2コマンドの--includedirで指定したパス）内のファイルを （ソースコードの保存先パス）\\Auto-Create-tran-lod1-2-tool\\lod1\\src\\LIB\\boost_1_83_0\\lib\\x64にコピーします。 本ツールのソースコードがC:\\work以下に設置されており、ライブラリビルド時のb2コマンドの--includedirオプションがC:\\work\\lib\\boost_1_83_0\\include、--libdirオプションがC:\\work\\lib\\boost_1_83_0\\lib\\x64の場合のコピー元、コピー先のフォルダパスは以下のとおりです。 項目 コピー元フォルダパス コピー先フォルダパス インクルードヘッダファイル C:\\work\\lib\\boost_1_83_0\\include\\boost-1_83\\boost C:\\work\\Auto-Create-tran-lod1-2-tool\\lod1\\src\\LIB\\boost_1_83_0\\include\\boost ライブラリファイル C:\\work\\lib\\boost_1_83_0\\lib C:\\work\\Auto-Create-tran-lod1-2-tool\\lod1\\src\\LIB\\boost_1_83_0\\lib 【ライブラリコピー後のソースコードフォルダ構成】 4-2 Lod1道路自動生成ツールのビルド （1）本ツールのソリューションファイル（AutoCreateLod1Road.sln）をVisualStudio2019で開きます。 ソリューションファイルは、Auto-Create-tran-lod1-2-tool\\lod1\\src\\EXE\\AutoCreateLod1Roadに格納されています。 （2）AutoCreateLod1Road.slnをVisualStudio2019で開くと、ソリューション'AutoCreateLod1Road'に3つのプロジェクトが表示されます。 以下の赤枠部分のように、ソリューション構成を【Release】に、ソリューションプラットフォームを【x64】に設定します。 （3）以下の赤枠部分のように、[ソリューションのビルド]を選択し、ソリューション全体をビルドします。 （4）ビルドが正常に終了すると、ソリューションファイルと同じフォルダにあるx64\\Releaseフォルダに実行ファイルが生成されます。 以下赤枠内のファイルがアプリケーション実行時に必要なファイルです。 ファイル名 説明 AutoCreateLod1Road.exe LOD1道路モデル自動生成ツール ConvertShapeToCityGML.exe LOD1道路モデルのシェープファイルをCityGMLファイルに変換するツール shapelib.dll シェープファイル入出力ライブラリ"
  },
  "manual/devManLod2.html": {
    "href": "manual/devManLod2.html",
    "title": "環境構築手順書",
    "keywords": "環境構築手順書 1 本書について 本書では、LOD2道路モデル自動生成ツール（以下「本ツール」という。）の環境構築手順について記載しています。 2 動作環境 本ツールの動作環境は以下のとおりです。 項目 推奨動作環境 OS Microsoft Windows 10 または 11 CPU Intel Core i7以上 メモリ 16GB以上 GPU NVIDIA RTX 5000以上 メモリ 16GB以上 ネットワーク 不要 3 ソフトウェア環境 本ツールは、Python(バージョン3.9以上)のインストールが必要です。 以下のPythonライブラリを必要とします。 <ライブラリ一覧> ライブラリ名 ライセンス 説明 tqdm MIT License Mozilla Public License 2.0 プログレスバーの表示 shapely BSD License (BSD 3-Clause) 幾何計算 numpy BSD License (BSD-3-Clause) 数値計算 Pillow Historical Permission Notice and Disclaimer 画像の読み書き PyYAML MIT License yamlファイルの読み書き pyproj MIT License 座標系の変換 pyshp MIT License シェープファイルの読み書き lxml BSD License (BSD-3-Clause) XMLファイルの読み書き torch BSD License (BSD-3) 機械学習 torchvision BSD 機械学習 lightning Apache Software License (Apache-2.0) 機械学習 opencv-python Apache Software License (Apache 2.0) 画像の読み書き、画像処理 opencv-contrib-python Apache Software License (Apache 2.0) 画像処理 networkx BSD License グラフ構造の管理 shapelysmooth Public Domain (Unlicense) 幾何のスムージング処理 geopandas BSD License (BSD 3-Clause) シェープファイルの書き出し sortedcontainers Apache Software License (Apache 2.0) ソート済みコレクションの管理 openmim Apache 2.0 license OpenMMLab ライブラリの管理 mmcv Apache Software License 機械学習 mmsegmentation Apache Software License (Apache License 2.0) 機械学習 mmdet Apache Software License (Apache License 2.0) 機械学習 4 仮想環境の作成 専用環境を作成しツールを実行する場合、仮想環境を構築することを推奨します。 例として以下にvenvを使用した仮想環境の作成手順を示します。 venv は Python の標準ツールであるため、インストールは不要です。なお、コマンドプロンプト上での操作とします。 4-1 作成 以下のコマンドを使用し、仮想環境を作成します。一度実施すれば良いです。 > cd [仮想環境を作成するフォルダパス] > py -[Pythonのインストールバージョン] -m venv [仮想環境名] [Pythonのインストールバージョン]：例として「3.9」など [仮想環境名]：任意の名称 4-2 切り替え 以下のコマンドを使用し、作成した環境へ切り替えを行います。 > cd [仮想環境を作成したフォルダパス] > [仮想環境名]\\Scripts\\activate.bat [仮想環境名]：作成した仮想環境名 4-3 終了 仮想環境を終了する場合には以下のコマンドを使用し、切り替えた環境を終了します。 このまま環境構築を実施する場合には終了する必要はありません。 > deactivate 5 システム環境の構築 本ツールを実行するための環境構築として、システム環境変数の登録と仮想環境へ依存ライブラリのインストールを行います。 なお、依存ライブラリのインストールで使用するrequirements.txtはツールのフォルダ内に同梱しています。 5-1 システム環境変数の登録 変数名 値 PYTHONPATH F:\\AutoCreateRoadLod2\\src (本ツールのsrcフォルダまでのパス) <システム環境構築におけるシステム環境変数の登録> 5-2 依存ライブラリのインストール 以下コマンドを使用して、仮想環境に依存ライブラリをインストールします。 requirements.txtは、本ツールのソースコードに同梱しています。 > pip install –r requirements.txt 6 GPU環境の構築 GPU環境の構築方法を以下に示します。なお、手順6-1～6-4はPCに対して一度設定すれば良いです。 手順6-5以降に関しては、仮想環境ごとに設定する必要があります。 [GPU環境構築時の注意点] 仮想環境に、torch、 torchvisionライブラリ、拡張モジュールをインストールする作業は、システム環境の構築後に行う必要があります。 6-1 Build Tools for Visual Studioのインストール 以下より、Build Tools for Visual Studio 2017、または、Build Tools for Visual Studio 2019をダウンロードし、インストールします。 なお、Visual Studio 2017 、または、Visual Studio 2019のインストールでも良いです。 https://visualstudio.microsoft.com/ja/downloads/ 6-2 cuda toolkit 11.8のインストール 以下より、cuda toolkit 11.8 をダウンロードし、インストールします。 なお、インストールオプションはデフォルト値のままで良いです。 https://developer.nvidia.com/cuda-11-8-0-download-archive 6-3 cuDNNのインストール 以下よりcuDNNをダウンロードします。 https://developer.nvidia.com/rdp/cudnn-download ダウンロードした「cudnn-windows-x86_64-8.9.5.29_cuda12-archive」を解凍します。 解凍したファイルを「C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8」以下の該当フォルダにコピーします。 <cuDNNのインストール> 6-4 システム環境変数の追加 システム環境変数に、以下の4変数を登録します。4変数の値は、共通とします。 変数名 値 CUDA_HOME, CUDA_PATH, CUDNN_HOME, CUDNN_PATH C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.8 <GPU環境構築におけるシステム環境変数の登録> 6-5 torch, torchvisionのインストール 仮想環境に、torch, torchvisionをインストールします。 > pip install torch==2.0.1+cu118 torchvision==0.15.2+cu118 --extra-index-url https://download.pytorch.org/whl/cu118"
  },
  "manual/userManLod1.html": {
    "href": "manual/userManLod1.html",
    "title": "操作マニュアル",
    "keywords": "操作マニュアル 1 本書について 本書では、LOD1道路モデル自動生成ツールの操作手順について記載しています。 2 ツール構成 LOD1道路モデル自動生成ツールは、道路のシェープファイルを読み込みLOD1道路モデルのシェープファイルを作成する「AutoCreateLod1Road.exe」と、LOD1道路モデルのシェープファイルをCityGMLファイルに変換する「ConvertShapeToCityGML.exe」の二つのアプリケーションで構成しています。 3 使い方 3-1 LOD1道路モデル自動生成 本節では、道路のシェープファイルを読み込みLOD1道路モデルのシェープファイルを作成する「AutoCreateLod1Road.exe」を本ツールとします。 3-1-1 入力シェープファイルの作成 LOD1道路モデル自動生成では、道路のシェープファイルと道路施設のシェープファイルを入力データとして使用します。（道路施設のシェープファイルは任意入力ファイルです。） 本ツールのユースケースでは、公共測量成果検査支援ツールを使用して、地図情報レベル2500のDM（Digital Mapping）データから道路と道路施設のシェープファイル（*.shp、*.shx、*.dbf、*.prj）を作成することを想定しています。 シェープファイルの座標系は、平面直角座標系を想定しています。 シェープファイル 説明 道路 道路のシェープファイル 道路施設_1 点形状の道路施設のシェープファイル 道路施設_3 線形状の道路施設のシェープファイル 道路施設_5 面形状の道路施設のシェープファイル シェープファイルには以下の属性データが必要です。 属性 説明 数値地形図データ取得分類コード DMデータの種別（道路縁（街区線）、道路橋（高架部）、道路のトンネル）判定に使用します。 データ形式は4桁の整数値です。 図形区分 DMデータを図面出力する際に必要となる図形区分です。 道路施設データを取得する際の選別処理で使用します。 データ形式は整数値です。 本ツールで使用する数値地形図データ取得分類コードは以下のとおりです。 数値地形図データ取得分類コード 説明 2101 道路縁（街区線） 2203 道路橋（高架部） 2219 道路のトンネル 本ツールで使用する図形区分コードは以下のとおりです。 図形区分 説明 0 非区分 3-1-2 入力パラメータファイルの作成 LOD1道路モデル自動生成で使用するパラメータを記載した入力パラメータファイルを作成します。 入力パラメータファイルの文字コードはShift_JISです。 【入力パラメータファイル例】 [Setting] RoadSHPPath = C:/work/data/DM_SHP/道路.shp RoadFacilitiesPointSHPPath = C:/work/data/DM_SHP/道路施設_1.shp RoadFacilitiesLineSHPPath = C:/work/data/DM_SHP/道路施設_3.shp RoadFacilitiesPolygonSHPPath = C:/work/data/DM_SHP/道路施設_5.shp JPZone = 9 RegionWidth = 1500 RegionHeight = 2000 ThreadNum = 8 OutputFolderPath = C:/work/output [DM_Attribute] DMCode = 分類コーA GeometryType = 図形区分 [ErrCheck] MinArea = 10.0 MaxDistance = 10.0 グループ 設定項目 説明 Setting RoadSHPPath 道路シェープファイルパス（*.shp）※1 RoadFacilitiesPointSHPPath 道路施設（点）シェープファイルパス（*.shp）※1 RoadFacilitiesLineSHPPath 道路施設（線）シェープファイルパス（*.shp）※1 RoadFacilitiesPolygonSHPPath 道路施設（線）シェープファイルパス（*.shp）※1 JPZone シェープファイルで使用している平面直角座標系の系番号（入力範囲 : 1-19） RegionWidth 道路縁データを分割して道路モデルを作成する際のモデル作成対象領域の幅。 入力値は整数とし、単位はm（メートル）です。 RegionHeight 道路縁データを分割して道路モデルを作成する際のモデル作成対象領域の高さ。 入力値は整数とし、単位はm（メートル）です。 ThreadNum 道路モデル作成時のマルチスレッド数。入力値は1以上の整数値とし、自マシンのスペックに合わせて設定してください。 OutputFolderPath 出力フォルダパス DM_Attribute DMCode 入力シェープファイルおける数値地形図データ取得分類コードの属性名 GeometryType 入力シェープファイルにおける図形区分の属性名 ErrCheck MinArea 小領域道路ポリゴンのエラーチェックの際に使用する面積閾値。単位は、m^2（平方メートル）です。 MaxDistance 車道交差部ポリゴンの中心が交差点から離れていないか確認するための距離閾値。単位はm（メートル）です。 ※1 シェープファイルパス（*.shp）が記載された同階層に、同名のshx、dbf、prjの拡張子のファイルが存在する想定です。 3-1-3 LOD1道路モデルの作成 入力シェープファイルと入力パラメータファイルの準備が整っている状態で、コマンドプロンプトより「AutoCreateLod1Road.exe」を実行してLOD1道路モデルを作成します。 実行コマンドは以下のとおりです。 # AutoCreateLod1Road.exe 入力パラメータファイルパス 【コマンド例】 「AutoCreateLod1Road.exe」と入力パラメータ「create_param.txt」がC:\\work\\AutoCreateLod1Roadに存在している想定です。 # cd C:\\work\\AutoCreateLod1Road # AutoCreateLod1Road.exe create_param.txt 作成したLOD1道路モデルは、入力パラメータファイルの「OutputFolderPath」に指定したフォルダパスに出力されます。 LOD1道路モデルは、車道交差部や橋梁、トンネルなどの道路構造変化部分において道路モデルを分割する仕様のため、道路モデルの幾何形状は穴がないポリゴンとなりますが、本ツールでは道路モデルの分割処理が失敗する場合も考慮し、ポリゴンの穴を無視したシェープファイルと、ポリゴンの穴を考慮したシェープファイルを出力します。 出力ファイル 説明 LOD1道路モデル（穴無視） LOD1道路ポリゴン（ポリゴンの穴は無視）のシェープファイル。 ファイル名は、入力道路シェープファイルと同名です。 LOD1道路モデル（穴考慮） LOD1道路ポリゴン（ポリゴンの穴を考慮）のシェープファイル。 ファイル名は、入力道路シェープファイル名_withHolesです。 エラーモデル情報 エラーが発生しているLOD1道路モデルのエラー内容と位置情報を記載したCSVファイル。 ファイル名は、ErrorInfo.csvです。 LOD1道路モデルシェープファイルは、道路モデルの幾何情報と属性情報として道路構造種別を保持します。 属性 説明 道路構造種別（sectType） CityGMLのuro:RoadStructureAttributeのuro:sectionTypeに該当する属性情報。データ形式は整数値です。 本ツールでは、高架橋は2、車道交差部は4、トンネルは6、その他の道路モデルは未入力（NULL）とします。 エラーモデル情報は、エラーが発生しているLOD1道路モデルのエラー内容と位置情報を保持しています。ファイルの文字コードはUTF-8です。 【エラーモデル情報例】 ERROR,X,Y TOPOLOGICAL_INVAILD_ERR, -35305.38, -64644.52 エラー内容 説明 MISSING_MODEL_ERR 出力結果の道路モデルと車道交差部等で分割する前の道路モデルを比較した結果、出力結果の道路モデルが欠落しています。 TOPOLOGICAL_INVAILD_ERR 道路モデルに自己交差や自己接触等のトポロジー不正が発生しています。 TOPOLOGICAL_SHORTAGE_POINT_ERR 道路モデルの始終点が同一座標ではありません。 TOPOLOGICAL_DUPLICATION_POINT_ERR 道路モデルの頂点列に重複頂点が存在します。 ANGLE_ERR 道路モデルに鋭角（0-45deg）な内角が発生しています。 INTERSECTION_MISMATCH_ERR 交差点座標を内包しない車道交差部が存在します。 INTERSECTION_SAME_POINT_ERR 同一交差点座標を内包する車道交差部が複数存在します。 INTERSECTION_DIFFERENT_POINT_ERR 車道交差部内に複数の交差点座標が存在します。 EXCESS_ERR 出力結果の道路モデルと車道交差部等で分割する前の道路モデルを比較した結果、出力結果の道路モデルが分割前の道路モデルからからはみ出しています。 SUPERIMPOSE_ERR 車道交差部同士で重畳しています。 WITHIN_ERR 車道交差部に内包されている車道交差部が存在します。 ROAD_DIVISION_ERR 車道交差部の分岐数と車道交差部の外輪郭線から道路縁と重畳する部分を除いたポリラインの本数が一致しません。 MINUSCULE_POLYGON_ERR 入力パラメータの「MinArea」より小さい面積の道路モデルが存在します。 INTERSECTION_DISTANCE_ERR 車道交差部の中心と交差点座標間の距離が、入力パラメータの「MaxDistance」より大きい道路モデルが存在します。 3-2 CityGML変換 本節では、LOD1道路モデルのシェープファイルをCityGMLファイルに変換する「ConvertShapeToCityGML.exe」を本ツールとします。 3-2-1 入力シェープファイルの準備 本ツールでは、道路面のシェープファイルを入力データとして使用します。 シェープファイルはLOD1道路面の幾何情報と属性情報を保持しています。 属性情報に関しては、マップファイルにて入力シェープファイルと出力CityGMLの属性情報の対応付けを行うため、CityGML変換に不必要な属性を含んでいても問題はありません。 シェープファイルの座標系は、平面直角座標系を想定しています。 【入力シェープファイル例】 3-2-2 マップファイルの作成 マップファイルは、入力シェープファイルと出力CityGMLの属性情報の対応付けを行うためルールを記載したCSVファイルです。 マップファイルは以下のファイルフォーマットのとおりに、1行に1属性ずつ変換対象の設定を記載します。 項目 説明 SettingAttrFlg 変換対象とするか否かを指定するフラグ（1 : ON、0 : OFF） CityGMLAttrName CityGMLの属性名 SHPAttrName シェープファイルの属性名 マップファイルのCityGMLの属性名として使用可能な項目は以下のとおりです。 CityGMLAttrName 説明 gml:description 道路の概要 gml:name 道路を識別する名称 道路法に基づき路線が指定又は認定された路線名 core:creationDate データが作成された日 core:terminationDate データが削除された日 tran:class 交通分類 tran:function 道路法における道路の区分及び建築基準法における道路の区分 tran:usage 道路の利用方法 uro:dmCode 公共測量標準図式の図式分類コード uro:meshCode 数値地形図データファイル仕様にもとづいて設定される図郭識別番号 uro:srcScale 元となるデータの地図情報レベル uro:geometrySrcDesc 幾何オブジェクトを作成する元となるデータの説明 uro:thematicSrcDesc 主題属性を作成する元となるデータの説明 uro:widthType 幅員の区分 uro:width 中央帯、車道、路肩、植樹帯、歩道等及び環境施設帯（環境施設帯の中の路肩、植樹帯、歩道等の部分を除いた部分）の幅員を合計した値 uro:numberOfLanes 上下線の合計（一方通行区間の場合を除く）の車線数 uro:sectionType 道路構造の種別 uro:sectionID 交通量調査において、調査の単位となる交通調査基本区間に付与される番号（原則として、「都道府県（2桁）」+「道路種別（1桁）」+「路線番号（4桁）」+「順番号（4桁）」からなる11桁の番号） uro:routeName 路線名 uro:weekday12hourTrafficVolume 平日7時～19時までに通過する車両台数 uro:weekday24hourTrafficVolume 平日7時～翌朝7時又は0時～翌日0時までに通過する車両台数 uro:largeVehicleRate 自動車類交通量に対する大型車交通量の割合 uro:congestionRate 交通調査基本区間の交通容量に対する交通量の比 uro:averageTravelSpeedInCongestion 朝のラッシュ時間帯（7時～9時）又は夕方のラッシュ時間帯（17時～19時）において平均旅行速度を集計し、その遅い方の時間帯の旅行速度 uro:averageInboundTravelSpeedCongestion 朝のラッシュ時間帯（7時～9時）又は夕方のラッシュ時間帯（17時～19時）において上り線における平均旅行速度を集計し、その遅い方の時間帯の旅行速度 uro:averageOutboundTraelSpeedInCongestion 朝のラッシュ時間帯（7時～9時）又は夕方のラッシュ時間帯（17時～19時）において下り線における平均旅行速度を集計し、その遅い方の時間帯の旅行速度 uro:averageInboundTravelSpeedNotCongestion 昼間非混雑（9時～17時）における上り線の平均旅行速度 uro:averageOutboundTravelSpeedNotCongestion 昼間非混雑（9時～17時）における下り線の平均旅行速度 uro:observationPointName 交通量等を観測した地点の名称 uro:reference 対象となる道路の区間を図上で域別する番号 uro:surveyYear 調査が実施された年 【マップファイル例】 SettingAttrFlg,CityGMLAttrName,SHPAttrName 1,gml:description,desc 1,gml:name,name 1,core:creationDate,createDate 1,core:terminationDate,termDate 1,tran:class,class 1,tran:function,func 1,tran:usage,usage 1,uro:dmCode,dmCode 1,uro:meshCode,meshCode 1,uro:srcScale,srcScale 1,uro:geometrySrcDesc,geomDesc 1,uro:thematicSrcDesc,themDesc 1,uro:widthType,widthType 1,uro:width,width 1,uro:numberOfLanes,numOfLanes 1,uro:sectionType,sectType 1,uro:sectionID,sectID 1,uro:routeName,routeName 1,uro:weekday12hourTrafficVolume,12hTrafVol 1,uro:weekday24hourTrafficVolume,24hTrafVol 1,uro:largeVehicleRate,lgVehRate 1,uro:congestionRate,cgstnRate 1,uro:averageTravelSpeedInCongestion,ATSIC 1,uro:averageInboundTravelSpeedCongestion,AIBTSIC 1,uro:averageOutboundTraelSpeedInCongestion,AOBTSIC 1,uro:averageInboundTravelSpeedNotCongestion,AIBTSNC 1,uro:averageOutboundTravelSpeedNotCongestion,AOBTSNC 1,uro:observationPointName,obsPtName 1,uro:reference,ref 1,uro:surveyYear,survYear 3-2-3 パラメータファイルの作成 本ツールで使用するパラメータを記載した入力パラメータファイルを作成します。 入力パラメータファイルの文字コードはShift_JISです。 【入力パラメータファイル例】 [Setting] LOD1RoadSHPPath = C:/work/conv/input/LOD1Road.shp JPZone = 6 MapFilePath = C:/work/conv/input/map.csv OutputFolderPath = C:/work/conv/output グループ 設定項目 説明 Setting LOD1RoadSHPPath LOD1道路面シェープファイルパス（*.shp） ※2 JPZone シェープファイルで使用している平面直角座標系の系番号（入力範囲 : 1-19） MapFilePath マップファイルパス OutputFolderPath 出力フォルダパス ※2 シェープファイルパス（*.shp）が記載された同階層に、同名のshx、dbf、prjの拡張子のファイルが存在する想定です。 3-2-4CityGML変換 入力シェープファイル、マップファイル及び入力パラメータファイルの準備が整っている状態で、コマンドプロンプトより「ConvertShapeToCityGML.exe」を実行してLOD1道路面シェープファイルをCityGMLファイルに変換します。 実行コマンドは以下のとおりです。 # ConvertShapeToCityGML.exe 入力パラメータファイルパス 【コマンド例】 「ConvertShapeToCityGML.exe」と入力パラメータ「conv_param.txt」がC:\\work\\AutoCreateLod1Roadに存在している想定です。 # cd C:\\work\\AutoCreateLod1Road # ConvertShapeToCityGML.exe ./conv_param.txt 作成したCityGMLファイルは、入力パラメータファイルの「OutputFolderPath」に指定したフォルダパスに出力されます。 出力CityGMLファイルは基準地域メッシュ（第3次地域区画）単位のデータとなっています。なお、CityGMLファイルは1ファイルのデータ量の上限が1GBとなっているため、基準地域メッシュサイズのCityGMLファイルのデータ量が1GBを超える場合は、ファイル分割を行います。 【出力CityGMLファイル名のフォーマット】 （メッシュコード）_（地物型）_（CRS）_（オプション）.gml 項目 説明 メッシュコード ファイル単位となる地域メッシュのメッシュコード 地物型 格納された地物の種類を示す接頭辞（本ツールでは、tran となります。） CRS 格納された地物に適用される空間参照系 オプション 必要に応じてファイルを細分したい場合の識別子"
  },
  "manual/userManLod2.html": {
    "href": "manual/userManLod2.html",
    "title": "操作マニュアル",
    "keywords": "操作マニュアル 1 本書について 本書では、LOD1道路モデル自動生成ツール（以下「本ツール」という。）の操作手順について記載しています。 2 システム概要 航空写真（オルソ）や道路ポリゴンデータ等からCityGML形式およびシェープファイル形式の道路LOD2モデルを出力する機能を持つツールです。 本ツールは、①道路LOD1データ入力機能、②LOD2モデル生成機能、③CityGML出力機能の3つの機能から構成されています。 更に②LOD2モデル生成機能は、道路の隣接関係の判定機能、推論用データの生成機能、セグメンテーション機能、ノイズ除去機能、オクルージョンの再分類機能、ベクトル化機能のサブ機能から構成されます。各機能は独立していて、入力されたデータは順番に処理されます。 ツール構成図を以下に示します。 <ツール構成図> 3 システム入力 3-1 入力ファイル一覧 以下に本ツールの入力ファイルを記載します。 <入力ファイル一覧> No データ名 入力元 ファイルフォーマット 説明 1 設定パラメータファイル ツール実行時にコンソール指定 jsonファイル ・ツール実行時に使用するパラメータを記載するファイル（詳細は3.2 設定パラメータファイル参照） 2 LOD1 CityGMLファイル、もしくはシェープファイル 設定パラメータファイルでパスを指定 CityGMLファイル：“CityGMLDir”キーにフォルダパス入力 シェープファイル：“ShapeDir”キーにフォルダパス入力 CityGMLファイル、もしくはシェープファイル ・ 道路LOD1データ ・ どちらを使用するかは設定パラメータファイルの”InputType”キーで指定する（詳細は3.2 設定パラメータファイル参照） 3 航空写真(オルソ)群 設定パラメータファイルの「OrthoDir」キーに入力でフォルダパスを指定 TIFFファイル ・航空写真(原画像)から作成した、LOD2モデル化対象エリアの航空写真のオルソ画像 3-2 設定パラメータファイル 本ツール実行時に使用するパラメータを記載するファイルです。 <設定パラメータファイルの仕様> ファイル形式 ファイル名 格納フォルダ 入力先 特記事項 JSON param.json 任意 システム全般 文字コードはUTF-8とします。 設定パラメータファイルのパラメータ一覧を以下に記載します。 <設定パラメータ一覧> No キー名 値形式 説明 1 OrthoDir 文字列 推論に使用するオルソ画像(ワールドファイル付き)が保存されているディレクトリのパスを指定します。 指定されたフォルダパスが存在しない場合は無効とし、エラーメッセージを表示し、処理を中止します。 2 InputType 整数値 入力ファイルにCityGMLファイル・シェープファイルのどちらを使うかを指定します。指定がない場合は無効とし、エラーメッセージを表示し、処理を中止します。 １：CityGMLファイル ２：シェープファイル 3 CityGMLDir 文字列 「InputType」にCityGMLファイルが指定されている場合に使用する、LOD1 CityGMLが保存されているディレクトリのパスを指定します。 指定されたフォルダパスが存在しない場合は無効とし、エラーメッセージを表示し、処理を中止します。 4 ShapeDir 文字列 「InputType」にシェープファイルが指定されている場合に使用する、LOD1 シェープファイルが保存されているディレクトリのパスを指定します。 指定されたフォルダパスが存在しない場合は無効とし、エラーメッセージを表示し、処理を中止します。 5 OutputDir 文字列 途中結果と最終結果を出力するディレクトリのパスを指定します。 指定されたフォルダパスが存在しない場合は無効とし、エラーメッセージを表示し、処理を中止します。 6 OrthoEpsg 整数値 オルソ画像のワールドファイルに記載された座標のEPSGコードを指定します。 未記入の場合は無効とし、エラーメッセージを表示し、処理を中止します。 7 CityGmlEpsg 整数値 CityGMLに記載されている座標のEPSGコードを指定します。 未記入の場合は無効とし、エラーメッセージを表示し、処理を中止します。 8 【任意】Device 文字列 推論を実行するデバイスを指定します。CPUのみの環境ではcpuを指定します。 9 【任意】InferenceSize 整数値 推論を行う際のタイルの1辺のサイズ(pixel) を指定します。 10 【任意】InferencePadding 整数値 推論を行う際のタイルで推論結果を使用しない外側の幅(pixel) を指定します。 11 【任意】NoiseThreshold 整数値 小さな領域の除去で除去する領域のピクセル数の閾値を指定します。 12 【任意】StartWith 文字列 途中から実行したい場合の開始ステップ名を指定します。(load_citygml, check_road_connectivity, generate_inference_input, infer, remove_noise, remove_occlusion, vectorize, export_citygml) output_dirにそのステップの直前までの結果が含まれている必要があります。 13 【任意】EndWith 文字列 途中で実行を止めたい場合の最後のステップ名を指定します。(load_citygml, check_road_connectivity, generate_inference_input, infer, remove_noise, remove_occlusion, vectorize, export_citygml) 14 OutputLogDir 文字列 ログのフォルダパスを指定します。 未記入または、存在しない場合は、本システムのPythonコードと同階層のログフォルダ“output_log”にログファイルを作成し、処理を中止します。 15 DebugLogOutput 真偽値 デバッグレベルのログを出力するかどうかのフラグを指定します。 trueまたはfalseで値を指定します。 未記入、または、真偽値以外の値が入力された場合は、エラーメッセージを表示し、処理を中止します。 設定パラメータファイルの記載例を以下に示します。 <設定パラメータファイル記載例> 4 システム出力 4-1 出力ファイル一覧 以下に本ツールの出力ファイルを記載します。 <出力ファイル一覧> No データ名 出力先 ファイルフォーマット 説明 1 LOD2 CityGMLファイル、もしくはシェープファイル 設定パラメータファイル“OutputDir”キーで指定したフォルダパスに新規作成した[CityGMLFolder_YYYYMMDD_HHMM\\8_lod2_output]（YYYMMDD_HHMMSSは作成時の時間）フォルダ（入力がシェープファイルの場合は[ShapeFolder_YYYYMMDD_HHMM\\8_lod2_output]） CityGMLファイル ・LOD2の道路情報、及び属性データを持ったCityGMLデータ。 ・入力データがCityGMLファイルの場合はCityGML ファイルとシェープファイルの両方を出力します。入力データがシェープファイルの場合はシェープファイルのみを出力します。 2 ログファイル 設定パラメータファイル“OutputLogDir”キーで指定したフォルダパスに新規作成した[outputlog_YYYMMDD_HHMMSS]（YYYMMDD_HHMMSSは作成時の時間） フォルダ （未記入または、存在しない場合は、実行時のカレントフォルダにログフォルダ“output_log”を作成し、その中に[outputlog_YYYMMDD_HHMMSS]（YYYMMDD_HHMMSSは作成時の時間）フォルダを作成します） txtファイル/csvファイル ・4.4 ログファイルを参照してください。 3 中間生成ファイル 設定パラメータファイル“OutputDir”キーで指定したフォルダパスに新規作成した[CityGMLFolder_YYYYMMDD_HHMM]（YYYMMDD_HHMMSSは作成時の時間）の以下フォルダ ・1_road_info ・2_road_info_with_neighbors ・3_inference_input ・4_inference_result ・5_inference_result_noiseless ・6_inference_result_without_occlusion ・7_vectorized TIFファイル/YMLファイル ・LOD2 CityGMLファイル、もしくはシェープファイルを出力するための中間生成ファイル群です。 4-2 LOD2 CityGMLファイル 本ツールが出力するLOD2 CityGMLファイルは、入力LOD1 CityGMLファイルの道路情報にLOD2道路情報を追記したCityGMLファイルです。 以下に、出力LOD2 CityGMLファイルの例を示します。 <出力LOD2 CityGMLファイル例> 4-3 LOD2 シェープファイル 本ツールが出力するLOD2 シェープファイルは、入力シェープファイルの道路情報にLOD2道路情報を追記したシェープファイルです。 以下に、出力LOD2 シェープファイルの例を示します。 <出力LOD2 シェープファイル例> 4-4 ログファイル 4-4-1 出力ログファイル一覧 以下に出力ログファイル一覧を記載します。 [No.1実行ログファイル]の詳細情報として、[No.2～6]の各モジュールログファイルを出力します。 なお[No.1～6]は開発者向けログ、[No.7モデル化結果サマリーファイル]はユーザー向けログを想定しています。 <出力ログファイル一覧> No データ名 出力ファイル名 説明 1 実行ログファイル main_log.txt ・本システムのログメッセージを出力します。 2 道路LOD1データ入力モジュールログファイル load_citygml_log.txt ・CityGML入力モジュールのログメッセージを出力します。 3 道路の隣接関係の判定モジュールログファイル check_road_connectivity_log.txt ・道路の隣接関係の判定のログメッセージを出力します。 4 推論用データの生成モジュールログファイル generate_inference_input_log.txt ・推論用データの生成モジュールのログメッセージを出力します。 5 セグメンテーションモジュールログファイル infer_log.txt ・セグメンテーションモジュールのログメッセージを出力します。 6 ノイズ除去モジュールログファイル remove_noise_log.txt ・ノイズ除去モジュールのログメッセージを出力します。 7 オクルージョンの再分類モジュールログファイル remove_occlusion_log.txt ・オクルージョンの再分類モジュールのログメッセージを出力します。 8 ベクトル化モジュールログファイル vectorize_log.txt ・ベクトル化モジュールのログメッセージを出力します。 9 CityGML出力モジュールログファイル export_citygml_log.txt ・CityGML出力モジュールのログメッセージを出力します。 10 結果サマリーファイル road_create_result.csv ・各道路のモデル化結果ログを出力します。 4-4-2 実行ログファイル 4-4-2-1 ログ構成 以下に実行ログファイルの構成を記載します。 <ログ構成> 出力場所 項目名 ヘッダ情報 ① 本ツール名 ② 本ツールのバージョン ③ 本ツールの起動時間 ④ 各モジュールの名前とモジュールログファイル名 ⑤ 設定パラメータファイルパス ⑥ モジュール動作中のデバッグログ出力フラグ モジュールごとの実行結果ログ ⑦ 各モジュールのログ フッタ情報 ⑧ 本ツールの終了時間 ⑨ 本ツールの稼働時間 [⑦各モジュールのログ]の例を以下に記載します。 処理対象のCityGMLファイルごとに、各モジュールの結果概要(モジュール開始・終了日時、モジュール実施結果)が記載されます。 <各モジュールログ例> ログファイルに出力されるログレベルの一覧を以下に記載します。 <ログレベル> ログレベル 説明 ERROR 処理が途中終了するような致命的なエラー MODEL_ERROR LOD2道路モデルに関するエラー(生成エラーの場合等) WARN 問題ですが、処理を継続実行可能なエラー INFO モジュールの開始や終了などの情報 DEBUG システムの動作状況に関する詳細な情報 パラメータファイルにてDebugLogOutputがtrueに指定されている場合は、出力します 4-4-2-2 ログメッセージ 以下に実行ログファイルの主なログメッセージを記載します。 開発者向けログである性質上、記載以外のメッセージが出力される場合があります。 <ログメッセージ> No ログレベル エラー文言 説明 1 [ERROR] parameter file does not exist. 設定ファイルが存在しない。 2 [ERROR] OrthoDir is invalid. 航空写真(オルソ)フォルダパスが文字列ではない。 3 [ERROR] OrthoDir not found. 航空写真(オルソ)フォルダパスが存在しない。 4 [ERROR] InputType is invalid. 入力ファイルタイプが数値ではない。 5 [ERROR] InputType not support. 入力ファイルタイプに1,2以外の値を入力している。 6 [ERROR] CityGMLDir is invalid. 入力CityGMLフォルダパスが文字列ではない。 7 [ERROR] CityGMLDir not found. 入力CityGMLフォルダパスが存在しない。 8 [ERROR] ShapeDir is invalid. 入力シェープファイルフォルダパスが文字列ではない。 9 [ERROR] ShapeDir not found. 入力シェープファイルフォルダパスが存在しない。 10 [ERROR] OutputDir is invalid. 結果出力先フォルダパスが文字列ではない。 11 [ERROR] [OutputDir] cannot make. 生成モデルの出力先パスが作成不可能なディレクトリを指定している。 [OutputDir]には、実際のフォルダパスが記載される。 12 [ERROR] OutputLogDir is invalid. ログ出力先フォルダパスが文字列ではない。 13 [ERROR] OrthoEpsg is invalid. EPSGコード(オルソ画像) が数値ではない。 14 [ERROR] CityGmlEpsg is invalid. EPSGコード(CityGML)が数値ではない。 15 [ERROR] DebugLogOutput is invalid. デバッグログ出力フラグに真偽値以外の値を入力している。 4-4-3 モジュールログファイル 4-4-3-1 ログ構成 モジュールログファイルの例を以下に記載します。 各モジュールの詳細結果(モジュール開始・終了日時、モジュールの任意メッセージ)が記載されます。 <モジュールログ例(CityGML出力)> 4-4-3-2 ログメッセージ 以下に各モジュールのエラーログファイルの主なログメッセージを記載します。 開発者向けログである性質上、記載以外のメッセージが出力される場合があります。 <道路LOD1データ入力モジュール ログメッセージ> No ログレベル エラー文言 説明 1 [ERROR] File not found 入力CityGMLファイルもしくは入力シェープファイルが存在しない。 2 [ERROR] support ortho files not found 入力CityGMLファイルに対応するオルソ画像が存在しない。 3 [WARNING] [モジュール結果中間出力フォルダ]already exists 結果中間出力フォルダが既にある。 4 [DEBUG] [オルソ画像ファイル名数] ortho file 入力されたオルソ画像ファイルの数を表示。 <道路の隣接関係の判定モジュール ログメッセージ> No ログレベル エラー文言 説明 1 [WARNING] [モジュール結果中間出力フォルダ]already exists 結果中間出力フォルダが既にある。 <推論用データの生成モジュール ログメッセージ> No ログレベル エラー文言 説明 1 [WARNING] [モジュール結果中間出力フォルダ]already exists 結果中間出力フォルダが既にある。 <セグメンテーションモジュール ログメッセージ> No ログレベル エラー文言 説明 1 [WARNING] [モジュール結果中間出力フォルダ]already exists 結果中間出力フォルダが既にある。 <ノイズ除去モジュール ログメッセージ> No ログレベル エラー文言 説明 1 [WARNING] [モジュール結果中間出力フォルダ]already exists 結果中間出力フォルダが既にある。 <オクルージョンの再分類モジュール ログメッセージ> No ログレベル エラー文言 説明 1 [WARNING] [モジュール結果中間出力フォルダ]already exists 結果中間出力フォルダが既にある。 2 [DEBUG] remain occlusion, rewrite roadway 連結成分内がオクルージョンのみの場合に車道(1)に書き換える際に表示。 <ベクトル化モジュール ログメッセージ> No ログレベル エラー文言 説明 1 [WARNING] [モジュール結果中間出力フォルダ]already exists 結果中間出力フォルダが既にある。 2 [WARNING] [結果最終出力フォルダ]already exists 結果最終出力フォルダが既にある。 < CityGML出力モジュール ログメッセージ> No ログレベル エラー文言 説明 1 [WARNING] [CityGMLファイル名] lod2 road data not found, write skip 該当のCityGMLファイルに書き込むLOD2道路データが存在しないためスキップする。 4-4-4 モデル化結果サマリーファイル 4-4-4-1 サマリー構成 各道路のモデル作成結果をcsvファイル形式で出力します。 出力例を以下に示します。 <モデル化結果出力例> ヘッダ部分に出力日時と出力結果の説明が記載され、結果一覧に道路ごとの出力結果やモジュールごとの実行結果が記載されます。結果一覧の出力項目と内容について以下に示します。 <結果サマリーファイルの出力項目> No 項目名 説明 1 No 行番号 2 ファイル名 道路情報が記載されているCityGMLファイル名もしくはシェープファイル名 3 道路ID 道路ID 4 最終結果 SUCCESS：道路モデルの作成に成功 WARNING：対応オルソがないため道路モデルの作成を行わない 5 道路LOD1データ入力 道路LOD1データ入力 〇：道路LOD1データの取得に成功 ×：道路LOD1データの取得に失敗 -：道路LOD1データ作成対象外 6 道路の隣接関係の判定 〇：道路の隣接関係の判定結果のデータ追加に成功 ×：道路の隣接関係の判定結果のデータ追加に失敗 -：道路の隣接関係の判定結果のデータ追加対象外 7 ベクトル化 〇：ベクトル化に成功 ×：ベクトル化に失敗 -：ベクトル化対象外 5 基本操作 本ツールの操作手順を記載します。 本ツールに入力するデータの作成を行います。(入力データの詳細については、3.システム入力を参照してください。) まずは、写真測量ソフトウェアを用いて航空写真(原画像)から、航空写真(オルソ)を作成します。 次に、航空写真の撮影エリアに該当するLOD1 CityGMLファイルを用意します。(G空間情報センターからCityGMLファイルをダウンロードすることを想定しています。)入力にシェープファイルを使用したい場合はユーザが用意します。 <入力ファイルの準備> 5-1 設定パラメータファイルの作成 入力ファイルの準備が完了したら、設定パラメータファイルの作成を行います。 設定パラメータファイルの記載内容については、3.2 設定パラメータファイルを参照してください。 設定パラメータファイルは本ツールの実行ファイル（AutoCreateRoadLod2.py）と同階層に配置してください。 5-2 ツールの実行 下図に操作手順を示します。 <操作手順> 本ツールを実行するにあたり、仮想環境を用意する必要があります。 なお、仮想環境の構築は初回のみの作業です。仮想環境の構築手順の詳細は、環境構築手順書を参照してください。 入力ファイルの準備、設定パラメータファイルの作成、および、仮想環境の構築が完了した場合は、仮想環境上で本ツールを実行します。 本ツールを実行する際のコマンドを以下に示します。(上図、操作手順のツールの実行で使用するコマンド) > python AutoCreateRoadLod2.py param.json AutoCreateRoadLod2.py : 本システムのPythonコード param.json : 設定パラメータファイルパス 本ツールの動作が終了した後は、仮想環境の終了動作を行うことで仮想環境から抜け出すことが出来ます。 出力ファイルの確認を行う際は、以下フォルダの確認を行います。 出力ファイル 出力場所 LOD2 CityGMLファイルまたはシェープファイル 設定パラメータファイルのOutputDirで指定したフォルダ内の「CityGMLFolder_YYYYMMDD_HHMM\\8_lod2_output」フォルダ （入力がシェープファイルの場合は「ShapeFolder_YYYYMMDD_HHMM\\8_lod2_output」） ログファイル 設定パラメータファイルのOutputLogDirで指定したフォルダ"
  }
}